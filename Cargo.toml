[package]
name = "mmtk"
version = "0.7.0"
authors = ["The MMTk Developers <>"]
edition = "2018"
license = "MIT OR Apache-2.0"
description = "MMTk is a framework for the design and implementation of high-performance and portable memory managers."
homepage = "https://www.mmtk.io"
repository = "https://github.com/mmtk/mmtk-core"
readme = "README.md"
categories = ["memory-management"]
keywords = ["gc", "garbage", "collection", "garbage-collection", "allocation"]

[lib]
name = "mmtk"
crate-type = ["rlib"]
doctest = false

[dependencies]
custom_derive = "0.1"
enum_derive = "0.1"
libc = "0.2"
jemalloc-sys = {version = "0.3.2", features = ["disable_initial_exec_tls"], optional = true }
mimalloc-sys = {version = "0.1.6", optional = true }
hoard-sys = {version = "0.1.1", optional = true }
lazy_static = "1.1"
log = {version = "0.4", features = ["max_level_trace", "release_max_level_off"] }
crossbeam-deque = "0.7"
crossbeam-queue = "0.3.2"
num_cpus = "1.8"
enum-map = "0.6.2"
downcast-rs = "1.1.1"
atomic-traits = "0.2.0"
atomic = "0.5"
spin = "0.9.2"
env_logger = "0.8.2"
pfm = {version = "0.1.0-beta.1", optional = true}
thread-priority = "0.2.4"

[dev-dependencies]
crossbeam = "0.7.3"
rand = "0.7.3"

[features]
# default = ["sanity"]
default = ["perf_counter", "work_packet_timer"]
# default = []

satb_timer = []
yield_and_roots_timer = []
work_packet_timer = []
barrier_measurement = []
instrumentation = []
log_gc = []
log_stages = ["log_gc"]
log_work_packets = ["log_stages"]
# IX Features
ix_concurrent_marking = []
ix_lock_free_block_allocation = []
ix_block_only = []
ix_defrag = []
lxr_los_16k = []
lxr_los_32k = []
lxr_block_16k = []
lxr_block_32k = []
lxr_block_64k = []
lxr_block_128k = []
lxr_block_256k = []
lxr_block_512k = []
lxr_block_1m = []
lxr_lock_3 = []
lxr_lock_4 = []
lxr_lock_5 = []
lxr_lock_6 = []
lxr_lock_7 = []
lxr_lock_8 = []
lxr_lock_9 = []
lxr_hole_counting = []
lxr_no_rc_in_cm = []
# LXR Features
ix_ref_count = ["ix_lock_free_block_allocation"]
lxr_heap_health_guided_gc = ["ix_ref_count"]
lxr_lazy_decrements = ["ix_ref_count"]
lxr_nursery_evacuation = ["ix_ref_count"]
lxr_mature_evacuation = ["ix_ref_count", "lxr_nursery_evacuation"]
lxr_concurrent_marking = ["ix_ref_count", "ix_concurrent_marking"]
lxr_block_only = ["ix_ref_count", "ix_block_only"]
# LXR Features (unused)
lxr_evacuate_nursery_in_recycled_lines = []
lxr_delayed_nursery_evacuation = []

# Non-moving, Non-concurrent LXR
lxr_basic = ["ix_ref_count"]
# LXR (Concurrent marking)
lxr_cm = ["lxr_basic", "lxr_concurrent_marking"]
# LXR (Lazy RC processing)
lxr_lazy = ["lxr_basic", "lxr_lazy_decrements"]
# LXR (Concurrent)
lxr_conc = ["lxr_basic", "lxr_concurrent_marking", "lxr_lazy_decrements"]
# LXR (Evacuation)
lxr_nevac = ["lxr_basic", "lxr_nursery_evacuation"]
lxr_evac = ["lxr_basic", "lxr_nursery_evacuation", "lxr_mature_evacuation"]
# LXR (Block only)
lxr_block = ["lxr_basic", "lxr_block_only"]
# LXR (Default config with full features)
lxr = ["lxr_basic", "lxr_cm", "lxr_lazy", "lxr_evac"]

# This feature is only supported on x86-64 for now
# It's manually added to CI scripts
perf_counter = ["pfm"]

# .github/scripts/ci-common.sh extracts features from the following part (including from comments).
# So be careful when editing or adding stuff to the section below.


# Do not modify the following line - ci-common.sh matches it
# -- Non mutually exclusive features --

# spaces
vm_space = []
ro_space = []
code_space  = []

# metadata
global_alloc_bit = []

# Run sanity GC
sanity = []
# Run analysis
analysis = []
# Use lock free variant of NoGC
nogc_lock_free = []
# Use lock free with no zeroing NoGC
nogc_no_zeroing = ["nogc_lock_free"]
# For using a single GC thread
# Q: Why do we need this as a compile time flat? We can always set the number of GC threads through options.
single_worker = []

# To run expensive comprehensive runtime checks, such as checking duplicate edges
extreme_assertions = []

# Do not modify the following line - ci-common.sh matches it
# -- Mutally exclusive features --
# Only one feature from each group can be provided. Otherwise build will fail.

# Name of the mutualy exclusive feature group. ci-common.sh matches lines like this one.
# Group:malloc
# only one of the following features should be enabled, or none to use the default malloc from libc
# this does not replace the global Rust allocator, but provides these libraries for GC implementation
malloc_mimalloc = ["mimalloc-sys"]
malloc_jemalloc = ["jemalloc-sys"]
malloc_hoard = ["hoard-sys"]

# If there are more groups, they should be inserted above this line
# Group:end
